package com.africa.crm.businessmanagement.main.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.africa.crm.businessmanagement.main.bean.LoginInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_INFO_BEAN".
*/
public class LoginInfoBeanDao extends AbstractDao<LoginInfoBean, Void> {

    public static final String TABLENAME = "LOGIN_INFO_BEAN";

    /**
     * Properties of entity LoginInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property CreateTime = new Property(1, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property UpdateTime = new Property(4, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Isdeleted = new Property(5, boolean.class, "isdeleted", false, "ISDELETED");
        public final static Property UserName = new Property(6, String.class, "userName", false, "USER_NAME");
        public final static Property CompanyId = new Property(7, String.class, "companyId", false, "COMPANY_ID");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property PassWord = new Property(9, String.class, "passWord", false, "PASS_WORD");
        public final static Property Version = new Property(10, int.class, "version", false, "VERSION");
    }


    public LoginInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LoginInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_INFO_BEAN\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"CREATE_TIME\" TEXT," + // 1: createTime
                "\"PHONE\" TEXT," + // 2: phone
                "\"EMAIL\" TEXT," + // 3: email
                "\"UPDATE_TIME\" TEXT," + // 4: updateTime
                "\"ISDELETED\" INTEGER NOT NULL ," + // 5: isdeleted
                "\"USER_NAME\" TEXT," + // 6: userName
                "\"COMPANY_ID\" TEXT," + // 7: companyId
                "\"TYPE\" TEXT," + // 8: type
                "\"PASS_WORD\" TEXT," + // 9: passWord
                "\"VERSION\" INTEGER NOT NULL );"); // 10: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginInfoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(2, createTime);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(5, updateTime);
        }
        stmt.bindLong(6, entity.getIsdeleted() ? 1L: 0L);
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(8, companyId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(10, passWord);
        }
        stmt.bindLong(11, entity.getVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginInfoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(2, createTime);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(5, updateTime);
        }
        stmt.bindLong(6, entity.getIsdeleted() ? 1L: 0L);
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(8, companyId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(10, passWord);
        }
        stmt.bindLong(11, entity.getVersion());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LoginInfoBean readEntity(Cursor cursor, int offset) {
        LoginInfoBean entity = new LoginInfoBean( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // updateTime
            cursor.getShort(offset + 5) != 0, // isdeleted
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // companyId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // passWord
            cursor.getInt(offset + 10) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginInfoBean entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsdeleted(cursor.getShort(offset + 5) != 0);
        entity.setUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompanyId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPassWord(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVersion(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LoginInfoBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LoginInfoBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(LoginInfoBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
