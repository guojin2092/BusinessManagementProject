package com.africa.crm.businessmanagement.main.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.africa.crm.businessmanagement.main.bean.CompanyInventoryInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPANY_INVENTORY_INFO".
*/
public class CompanyInventoryInfoDao extends AbstractDao<CompanyInventoryInfo, Long> {

    public static final String TABLENAME = "COMPANY_INVENTORY_INFO";

    /**
     * Properties of entity CompanyInventoryInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LocalId = new Property(0, Long.class, "localId", true, "_id");
        public final static Property TypeName = new Property(1, String.class, "typeName", false, "TYPE_NAME");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateTimeDate = new Property(4, Long.class, "createTimeDate", false, "CREATE_TIME_DATE");
        public final static Property Num = new Property(5, String.class, "num", false, "NUM");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property NumAfter = new Property(7, String.class, "numAfter", false, "NUM_AFTER");
        public final static Property NumBefore = new Property(8, String.class, "numBefore", false, "NUM_BEFORE");
        public final static Property CompanyId = new Property(9, String.class, "companyId", false, "COMPANY_ID");
        public final static Property Type = new Property(10, String.class, "type", false, "TYPE");
        public final static Property CompanyName = new Property(11, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property ProductName = new Property(12, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ProductId = new Property(13, String.class, "productId", false, "PRODUCT_ID");
        public final static Property IsLocal = new Property(14, boolean.class, "isLocal", false, "IS_LOCAL");
    }


    public CompanyInventoryInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyInventoryInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPANY_INVENTORY_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localId
                "\"TYPE_NAME\" TEXT," + // 1: typeName
                "\"ID\" TEXT," + // 2: id
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"CREATE_TIME_DATE\" INTEGER," + // 4: createTimeDate
                "\"NUM\" TEXT," + // 5: num
                "\"REMARK\" TEXT," + // 6: remark
                "\"NUM_AFTER\" TEXT," + // 7: numAfter
                "\"NUM_BEFORE\" TEXT," + // 8: numBefore
                "\"COMPANY_ID\" TEXT," + // 9: companyId
                "\"TYPE\" TEXT," + // 10: type
                "\"COMPANY_NAME\" TEXT," + // 11: companyName
                "\"PRODUCT_NAME\" TEXT," + // 12: productName
                "\"PRODUCT_ID\" TEXT," + // 13: productId
                "\"IS_LOCAL\" INTEGER NOT NULL );"); // 14: isLocal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPANY_INVENTORY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CompanyInventoryInfo entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        Long createTimeDate = entity.getCreateTimeDate();
        if (createTimeDate != null) {
            stmt.bindLong(5, createTimeDate);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String numAfter = entity.getNumAfter();
        if (numAfter != null) {
            stmt.bindString(8, numAfter);
        }
 
        String numBefore = entity.getNumBefore();
        if (numBefore != null) {
            stmt.bindString(9, numBefore);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(10, companyId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(12, companyName);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(13, productName);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(14, productId);
        }
        stmt.bindLong(15, entity.getIsLocal() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CompanyInventoryInfo entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        Long createTimeDate = entity.getCreateTimeDate();
        if (createTimeDate != null) {
            stmt.bindLong(5, createTimeDate);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String numAfter = entity.getNumAfter();
        if (numAfter != null) {
            stmt.bindString(8, numAfter);
        }
 
        String numBefore = entity.getNumBefore();
        if (numBefore != null) {
            stmt.bindString(9, numBefore);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(10, companyId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(12, companyName);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(13, productName);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(14, productId);
        }
        stmt.bindLong(15, entity.getIsLocal() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CompanyInventoryInfo readEntity(Cursor cursor, int offset) {
        CompanyInventoryInfo entity = new CompanyInventoryInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // createTimeDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // numAfter
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // numBefore
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // companyId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // companyName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // productName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // productId
            cursor.getShort(offset + 14) != 0 // isLocal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CompanyInventoryInfo entity, int offset) {
        entity.setLocalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTimeDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNumAfter(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNumBefore(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCompanyId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCompanyName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProductName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setProductId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsLocal(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CompanyInventoryInfo entity, long rowId) {
        entity.setLocalId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CompanyInventoryInfo entity) {
        if(entity != null) {
            return entity.getLocalId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CompanyInventoryInfo entity) {
        return entity.getLocalId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
