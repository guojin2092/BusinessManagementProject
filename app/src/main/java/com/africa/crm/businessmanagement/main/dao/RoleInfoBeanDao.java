package com.africa.crm.businessmanagement.main.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.africa.crm.businessmanagement.main.bean.RoleInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROLE_INFO_BEAN".
*/
public class RoleInfoBeanDao extends AbstractDao<RoleInfoBean, Long> {

    public static final String TABLENAME = "ROLE_INFO_BEAN";

    /**
     * Properties of entity RoleInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LocalId = new Property(0, Long.class, "localId", true, "_id");
        public final static Property TypeName = new Property(1, String.class, "typeName", false, "TYPE_NAME");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property OrderNum = new Property(3, String.class, "orderNum", false, "ORDER_NUM");
        public final static Property RoleCode = new Property(4, String.class, "roleCode", false, "ROLE_CODE");
        public final static Property RoleName = new Property(5, String.class, "roleName", false, "ROLE_NAME");
    }


    public RoleInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RoleInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROLE_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localId
                "\"TYPE_NAME\" TEXT," + // 1: typeName
                "\"ID\" TEXT," + // 2: id
                "\"ORDER_NUM\" TEXT," + // 3: orderNum
                "\"ROLE_CODE\" TEXT," + // 4: roleCode
                "\"ROLE_NAME\" TEXT);"); // 5: roleName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROLE_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RoleInfoBean entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindString(4, orderNum);
        }
 
        String roleCode = entity.getRoleCode();
        if (roleCode != null) {
            stmt.bindString(5, roleCode);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(6, roleName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RoleInfoBean entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindString(4, orderNum);
        }
 
        String roleCode = entity.getRoleCode();
        if (roleCode != null) {
            stmt.bindString(5, roleCode);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(6, roleName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RoleInfoBean readEntity(Cursor cursor, int offset) {
        RoleInfoBean entity = new RoleInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // roleCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // roleName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RoleInfoBean entity, int offset) {
        entity.setLocalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRoleCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoleName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RoleInfoBean entity, long rowId) {
        entity.setLocalId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RoleInfoBean entity) {
        if(entity != null) {
            return entity.getLocalId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RoleInfoBean entity) {
        return entity.getLocalId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
