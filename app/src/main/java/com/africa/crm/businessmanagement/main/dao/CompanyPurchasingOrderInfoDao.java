package com.africa.crm.businessmanagement.main.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.africa.crm.businessmanagement.main.bean.CompanyPurchasingOrderInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPANY_PURCHASING_ORDER_INFO".
*/
public class CompanyPurchasingOrderInfoDao extends AbstractDao<CompanyPurchasingOrderInfo, Long> {

    public static final String TABLENAME = "COMPANY_PURCHASING_ORDER_INFO";

    /**
     * Properties of entity CompanyPurchasingOrderInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LocalId = new Property(0, Long.class, "localId", true, "_id");
        public final static Property CreateTime = new Property(1, String.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateTimeDate = new Property(2, Long.class, "createTimeDate", false, "CREATE_TIME_DATE");
        public final static Property SupplierName = new Property(3, String.class, "supplierName", false, "SUPPLIER_NAME");
        public final static Property SendAddress = new Property(4, String.class, "sendAddress", false, "SEND_ADDRESS");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property OrderDate = new Property(6, String.class, "orderDate", false, "ORDER_DATE");
        public final static Property State = new Property(7, String.class, "state", false, "STATE");
        public final static Property Code = new Property(8, String.class, "code", false, "CODE");
        public final static Property CompanyName = new Property(9, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property UserNickName = new Property(10, String.class, "userNickName", false, "USER_NICK_NAME");
        public final static Property Id = new Property(11, String.class, "id", false, "ID");
        public final static Property ArriveDate = new Property(12, String.class, "arriveDate", false, "ARRIVE_DATE");
        public final static Property EditAble = new Property(13, String.class, "editAble", false, "EDIT_ABLE");
        public final static Property DestinationAddress = new Property(14, String.class, "destinationAddress", false, "DESTINATION_ADDRESS");
        public final static Property SendAddressZipCode = new Property(15, String.class, "sendAddressZipCode", false, "SEND_ADDRESS_ZIP_CODE");
        public final static Property UserId = new Property(16, String.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(17, String.class, "name", false, "NAME");
        public final static Property StateName = new Property(18, String.class, "stateName", false, "STATE_NAME");
        public final static Property CompanyId = new Property(19, String.class, "companyId", false, "COMPANY_ID");
        public final static Property Products = new Property(20, String.class, "products", false, "PRODUCTS");
        public final static Property Clause = new Property(21, String.class, "clause", false, "CLAUSE");
        public final static Property DestinationAddressZipCode = new Property(22, String.class, "destinationAddressZipCode", false, "DESTINATION_ADDRESS_ZIP_CODE");
        public final static Property Chosen = new Property(23, boolean.class, "chosen", false, "CHOSEN");
        public final static Property IsLocal = new Property(24, boolean.class, "isLocal", false, "IS_LOCAL");
    }


    public CompanyPurchasingOrderInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyPurchasingOrderInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPANY_PURCHASING_ORDER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localId
                "\"CREATE_TIME\" TEXT," + // 1: createTime
                "\"CREATE_TIME_DATE\" INTEGER," + // 2: createTimeDate
                "\"SUPPLIER_NAME\" TEXT," + // 3: supplierName
                "\"SEND_ADDRESS\" TEXT," + // 4: sendAddress
                "\"REMARK\" TEXT," + // 5: remark
                "\"ORDER_DATE\" TEXT," + // 6: orderDate
                "\"STATE\" TEXT," + // 7: state
                "\"CODE\" TEXT," + // 8: code
                "\"COMPANY_NAME\" TEXT," + // 9: companyName
                "\"USER_NICK_NAME\" TEXT," + // 10: userNickName
                "\"ID\" TEXT," + // 11: id
                "\"ARRIVE_DATE\" TEXT," + // 12: arriveDate
                "\"EDIT_ABLE\" TEXT," + // 13: editAble
                "\"DESTINATION_ADDRESS\" TEXT," + // 14: destinationAddress
                "\"SEND_ADDRESS_ZIP_CODE\" TEXT," + // 15: sendAddressZipCode
                "\"USER_ID\" TEXT," + // 16: userId
                "\"NAME\" TEXT," + // 17: name
                "\"STATE_NAME\" TEXT," + // 18: stateName
                "\"COMPANY_ID\" TEXT," + // 19: companyId
                "\"PRODUCTS\" TEXT," + // 20: products
                "\"CLAUSE\" TEXT," + // 21: clause
                "\"DESTINATION_ADDRESS_ZIP_CODE\" TEXT," + // 22: destinationAddressZipCode
                "\"CHOSEN\" INTEGER NOT NULL ," + // 23: chosen
                "\"IS_LOCAL\" INTEGER NOT NULL );"); // 24: isLocal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPANY_PURCHASING_ORDER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CompanyPurchasingOrderInfo entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(2, createTime);
        }
 
        Long createTimeDate = entity.getCreateTimeDate();
        if (createTimeDate != null) {
            stmt.bindLong(3, createTimeDate);
        }
 
        String supplierName = entity.getSupplierName();
        if (supplierName != null) {
            stmt.bindString(4, supplierName);
        }
 
        String sendAddress = entity.getSendAddress();
        if (sendAddress != null) {
            stmt.bindString(5, sendAddress);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
 
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(7, orderDate);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(8, state);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(9, code);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(10, companyName);
        }
 
        String userNickName = entity.getUserNickName();
        if (userNickName != null) {
            stmt.bindString(11, userNickName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(12, id);
        }
 
        String arriveDate = entity.getArriveDate();
        if (arriveDate != null) {
            stmt.bindString(13, arriveDate);
        }
 
        String editAble = entity.getEditAble();
        if (editAble != null) {
            stmt.bindString(14, editAble);
        }
 
        String destinationAddress = entity.getDestinationAddress();
        if (destinationAddress != null) {
            stmt.bindString(15, destinationAddress);
        }
 
        String sendAddressZipCode = entity.getSendAddressZipCode();
        if (sendAddressZipCode != null) {
            stmt.bindString(16, sendAddressZipCode);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(17, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(18, name);
        }
 
        String stateName = entity.getStateName();
        if (stateName != null) {
            stmt.bindString(19, stateName);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(20, companyId);
        }
 
        String products = entity.getProducts();
        if (products != null) {
            stmt.bindString(21, products);
        }
 
        String clause = entity.getClause();
        if (clause != null) {
            stmt.bindString(22, clause);
        }
 
        String destinationAddressZipCode = entity.getDestinationAddressZipCode();
        if (destinationAddressZipCode != null) {
            stmt.bindString(23, destinationAddressZipCode);
        }
        stmt.bindLong(24, entity.getChosen() ? 1L: 0L);
        stmt.bindLong(25, entity.getIsLocal() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CompanyPurchasingOrderInfo entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(2, createTime);
        }
 
        Long createTimeDate = entity.getCreateTimeDate();
        if (createTimeDate != null) {
            stmt.bindLong(3, createTimeDate);
        }
 
        String supplierName = entity.getSupplierName();
        if (supplierName != null) {
            stmt.bindString(4, supplierName);
        }
 
        String sendAddress = entity.getSendAddress();
        if (sendAddress != null) {
            stmt.bindString(5, sendAddress);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
 
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(7, orderDate);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(8, state);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(9, code);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(10, companyName);
        }
 
        String userNickName = entity.getUserNickName();
        if (userNickName != null) {
            stmt.bindString(11, userNickName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(12, id);
        }
 
        String arriveDate = entity.getArriveDate();
        if (arriveDate != null) {
            stmt.bindString(13, arriveDate);
        }
 
        String editAble = entity.getEditAble();
        if (editAble != null) {
            stmt.bindString(14, editAble);
        }
 
        String destinationAddress = entity.getDestinationAddress();
        if (destinationAddress != null) {
            stmt.bindString(15, destinationAddress);
        }
 
        String sendAddressZipCode = entity.getSendAddressZipCode();
        if (sendAddressZipCode != null) {
            stmt.bindString(16, sendAddressZipCode);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(17, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(18, name);
        }
 
        String stateName = entity.getStateName();
        if (stateName != null) {
            stmt.bindString(19, stateName);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(20, companyId);
        }
 
        String products = entity.getProducts();
        if (products != null) {
            stmt.bindString(21, products);
        }
 
        String clause = entity.getClause();
        if (clause != null) {
            stmt.bindString(22, clause);
        }
 
        String destinationAddressZipCode = entity.getDestinationAddressZipCode();
        if (destinationAddressZipCode != null) {
            stmt.bindString(23, destinationAddressZipCode);
        }
        stmt.bindLong(24, entity.getChosen() ? 1L: 0L);
        stmt.bindLong(25, entity.getIsLocal() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CompanyPurchasingOrderInfo readEntity(Cursor cursor, int offset) {
        CompanyPurchasingOrderInfo entity = new CompanyPurchasingOrderInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // createTimeDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // supplierName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sendAddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // state
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // code
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // companyName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userNickName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // arriveDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // editAble
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // destinationAddress
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // sendAddressZipCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // name
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // stateName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // companyId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // products
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // clause
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // destinationAddressZipCode
            cursor.getShort(offset + 23) != 0, // chosen
            cursor.getShort(offset + 24) != 0 // isLocal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CompanyPurchasingOrderInfo entity, int offset) {
        entity.setLocalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTimeDate(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSupplierName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSendAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setState(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCompanyName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserNickName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setArriveDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEditAble(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDestinationAddress(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSendAddressZipCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStateName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCompanyId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setProducts(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setClause(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDestinationAddressZipCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setChosen(cursor.getShort(offset + 23) != 0);
        entity.setIsLocal(cursor.getShort(offset + 24) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CompanyPurchasingOrderInfo entity, long rowId) {
        entity.setLocalId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CompanyPurchasingOrderInfo entity) {
        if(entity != null) {
            return entity.getLocalId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CompanyPurchasingOrderInfo entity) {
        return entity.getLocalId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
