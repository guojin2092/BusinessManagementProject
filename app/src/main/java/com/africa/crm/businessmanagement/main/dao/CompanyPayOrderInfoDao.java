package com.africa.crm.businessmanagement.main.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.africa.crm.businessmanagement.main.bean.CompanyPayOrderInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPANY_PAY_ORDER_INFO".
*/
public class CompanyPayOrderInfoDao extends AbstractDao<CompanyPayOrderInfo, Long> {

    public static final String TABLENAME = "COMPANY_PAY_ORDER_INFO";

    /**
     * Properties of entity CompanyPayOrderInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LocalId = new Property(0, Long.class, "localId", true, "_id");
        public final static Property HasPrint = new Property(1, String.class, "hasPrint", false, "HAS_PRINT");
        public final static Property CustomerName = new Property(2, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateTimeDate = new Property(4, Long.class, "createTimeDate", false, "CREATE_TIME_DATE");
        public final static Property HasInvoice = new Property(5, String.class, "hasInvoice", false, "HAS_INVOICE");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property HasInvoiceName = new Property(7, String.class, "hasInvoiceName", false, "HAS_INVOICE_NAME");
        public final static Property HasPrintName = new Property(8, String.class, "hasPrintName", false, "HAS_PRINT_NAME");
        public final static Property SalesOrderId = new Property(9, String.class, "salesOrderId", false, "SALES_ORDER_ID");
        public final static Property Code = new Property(10, String.class, "code", false, "CODE");
        public final static Property CompanyName = new Property(11, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property PayTime = new Property(12, String.class, "payTime", false, "PAY_TIME");
        public final static Property UserNickName = new Property(13, String.class, "userNickName", false, "USER_NICK_NAME");
        public final static Property Id = new Property(14, String.class, "id", false, "ID");
        public final static Property Price = new Property(15, String.class, "price", false, "PRICE");
        public final static Property EditAble = new Property(16, String.class, "editAble", false, "EDIT_ABLE");
        public final static Property UserId = new Property(17, String.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(18, String.class, "name", false, "NAME");
        public final static Property SalesOrderName = new Property(19, String.class, "salesOrderName", false, "SALES_ORDER_NAME");
        public final static Property InvoiceFiles = new Property(20, String.class, "invoiceFiles", false, "INVOICE_FILES");
        public final static Property CompanyId = new Property(21, String.class, "companyId", false, "COMPANY_ID");
        public final static Property TradingOrderId = new Property(22, String.class, "tradingOrderId", false, "TRADING_ORDER_ID");
        public final static Property TradingOrderName = new Property(23, String.class, "tradingOrderName", false, "TRADING_ORDER_NAME");
        public final static Property Chosen = new Property(24, boolean.class, "chosen", false, "CHOSEN");
        public final static Property IsLocal = new Property(25, boolean.class, "isLocal", false, "IS_LOCAL");
    }


    public CompanyPayOrderInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyPayOrderInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPANY_PAY_ORDER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localId
                "\"HAS_PRINT\" TEXT," + // 1: hasPrint
                "\"CUSTOMER_NAME\" TEXT," + // 2: customerName
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"CREATE_TIME_DATE\" INTEGER," + // 4: createTimeDate
                "\"HAS_INVOICE\" TEXT," + // 5: hasInvoice
                "\"REMARK\" TEXT," + // 6: remark
                "\"HAS_INVOICE_NAME\" TEXT," + // 7: hasInvoiceName
                "\"HAS_PRINT_NAME\" TEXT," + // 8: hasPrintName
                "\"SALES_ORDER_ID\" TEXT," + // 9: salesOrderId
                "\"CODE\" TEXT," + // 10: code
                "\"COMPANY_NAME\" TEXT," + // 11: companyName
                "\"PAY_TIME\" TEXT," + // 12: payTime
                "\"USER_NICK_NAME\" TEXT," + // 13: userNickName
                "\"ID\" TEXT," + // 14: id
                "\"PRICE\" TEXT," + // 15: price
                "\"EDIT_ABLE\" TEXT," + // 16: editAble
                "\"USER_ID\" TEXT," + // 17: userId
                "\"NAME\" TEXT," + // 18: name
                "\"SALES_ORDER_NAME\" TEXT," + // 19: salesOrderName
                "\"INVOICE_FILES\" TEXT," + // 20: invoiceFiles
                "\"COMPANY_ID\" TEXT," + // 21: companyId
                "\"TRADING_ORDER_ID\" TEXT," + // 22: tradingOrderId
                "\"TRADING_ORDER_NAME\" TEXT," + // 23: tradingOrderName
                "\"CHOSEN\" INTEGER NOT NULL ," + // 24: chosen
                "\"IS_LOCAL\" INTEGER NOT NULL );"); // 25: isLocal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPANY_PAY_ORDER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CompanyPayOrderInfo entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        String hasPrint = entity.getHasPrint();
        if (hasPrint != null) {
            stmt.bindString(2, hasPrint);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        Long createTimeDate = entity.getCreateTimeDate();
        if (createTimeDate != null) {
            stmt.bindLong(5, createTimeDate);
        }
 
        String hasInvoice = entity.getHasInvoice();
        if (hasInvoice != null) {
            stmt.bindString(6, hasInvoice);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String hasInvoiceName = entity.getHasInvoiceName();
        if (hasInvoiceName != null) {
            stmt.bindString(8, hasInvoiceName);
        }
 
        String hasPrintName = entity.getHasPrintName();
        if (hasPrintName != null) {
            stmt.bindString(9, hasPrintName);
        }
 
        String salesOrderId = entity.getSalesOrderId();
        if (salesOrderId != null) {
            stmt.bindString(10, salesOrderId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(11, code);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(12, companyName);
        }
 
        String payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindString(13, payTime);
        }
 
        String userNickName = entity.getUserNickName();
        if (userNickName != null) {
            stmt.bindString(14, userNickName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(15, id);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(16, price);
        }
 
        String editAble = entity.getEditAble();
        if (editAble != null) {
            stmt.bindString(17, editAble);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(18, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(19, name);
        }
 
        String salesOrderName = entity.getSalesOrderName();
        if (salesOrderName != null) {
            stmt.bindString(20, salesOrderName);
        }
 
        String invoiceFiles = entity.getInvoiceFiles();
        if (invoiceFiles != null) {
            stmt.bindString(21, invoiceFiles);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(22, companyId);
        }
 
        String tradingOrderId = entity.getTradingOrderId();
        if (tradingOrderId != null) {
            stmt.bindString(23, tradingOrderId);
        }
 
        String tradingOrderName = entity.getTradingOrderName();
        if (tradingOrderName != null) {
            stmt.bindString(24, tradingOrderName);
        }
        stmt.bindLong(25, entity.getChosen() ? 1L: 0L);
        stmt.bindLong(26, entity.getIsLocal() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CompanyPayOrderInfo entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        String hasPrint = entity.getHasPrint();
        if (hasPrint != null) {
            stmt.bindString(2, hasPrint);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        Long createTimeDate = entity.getCreateTimeDate();
        if (createTimeDate != null) {
            stmt.bindLong(5, createTimeDate);
        }
 
        String hasInvoice = entity.getHasInvoice();
        if (hasInvoice != null) {
            stmt.bindString(6, hasInvoice);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String hasInvoiceName = entity.getHasInvoiceName();
        if (hasInvoiceName != null) {
            stmt.bindString(8, hasInvoiceName);
        }
 
        String hasPrintName = entity.getHasPrintName();
        if (hasPrintName != null) {
            stmt.bindString(9, hasPrintName);
        }
 
        String salesOrderId = entity.getSalesOrderId();
        if (salesOrderId != null) {
            stmt.bindString(10, salesOrderId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(11, code);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(12, companyName);
        }
 
        String payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindString(13, payTime);
        }
 
        String userNickName = entity.getUserNickName();
        if (userNickName != null) {
            stmt.bindString(14, userNickName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(15, id);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(16, price);
        }
 
        String editAble = entity.getEditAble();
        if (editAble != null) {
            stmt.bindString(17, editAble);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(18, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(19, name);
        }
 
        String salesOrderName = entity.getSalesOrderName();
        if (salesOrderName != null) {
            stmt.bindString(20, salesOrderName);
        }
 
        String invoiceFiles = entity.getInvoiceFiles();
        if (invoiceFiles != null) {
            stmt.bindString(21, invoiceFiles);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(22, companyId);
        }
 
        String tradingOrderId = entity.getTradingOrderId();
        if (tradingOrderId != null) {
            stmt.bindString(23, tradingOrderId);
        }
 
        String tradingOrderName = entity.getTradingOrderName();
        if (tradingOrderName != null) {
            stmt.bindString(24, tradingOrderName);
        }
        stmt.bindLong(25, entity.getChosen() ? 1L: 0L);
        stmt.bindLong(26, entity.getIsLocal() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CompanyPayOrderInfo readEntity(Cursor cursor, int offset) {
        CompanyPayOrderInfo entity = new CompanyPayOrderInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hasPrint
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // createTimeDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hasInvoice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hasInvoiceName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hasPrintName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // salesOrderId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // code
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // companyName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // payTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // userNickName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // id
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // price
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // editAble
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // userId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // name
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // salesOrderName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // invoiceFiles
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // companyId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // tradingOrderId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // tradingOrderName
            cursor.getShort(offset + 24) != 0, // chosen
            cursor.getShort(offset + 25) != 0 // isLocal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CompanyPayOrderInfo entity, int offset) {
        entity.setLocalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHasPrint(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTimeDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setHasInvoice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHasInvoiceName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHasPrintName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSalesOrderId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCompanyName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPayTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserNickName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPrice(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEditAble(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUserId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSalesOrderName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setInvoiceFiles(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCompanyId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setTradingOrderId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setTradingOrderName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setChosen(cursor.getShort(offset + 24) != 0);
        entity.setIsLocal(cursor.getShort(offset + 25) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CompanyPayOrderInfo entity, long rowId) {
        entity.setLocalId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CompanyPayOrderInfo entity) {
        if(entity != null) {
            return entity.getLocalId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CompanyPayOrderInfo entity) {
        return entity.getLocalId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
